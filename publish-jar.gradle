apply plugin: 'maven'
apply plugin: 'signing'

version = PUBLISH_VERSION
group = PUBLISH_GROUP_ID

ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
}


def isReleaseBuild() {
    return PUBLISH_VERSION.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ossrhUsername
}

def getRepositoryPassword() {
    return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ossrhPassword
}

def configurePom(pom) {
    pom.groupId = PUBLISH_GROUP_ID
    pom.artifactId = PUBLISH_ARTIFACT_ID
    pom.version = PUBLISH_VERSION

    pom.project {
        name PUBLISH_GROUP_ID
        packaging "jar"
        description 'AutoBindings for Android'
        url = 'https://github.com/KaustubhPatange/AutoBindings'

        scm {
            connection = 'scm:git:github.com/KaustubhPatange/AutoBindings.git'
            developerConnection = 'scm:git:ssh://github.com/KaustubhPatange/AutoBindings.git'
            url = 'https://github.com/KaustubhPatange/AutoBindings/tree/master'
        }

        licenses {
            license {
                name = 'The Apache License, Version 2.0'
                url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
            }
        }
        developers {
            developer {
                id = 'kp2016'
                name = 'Kaustubh Patange'
                email = 'developerkp16@gmail.com'
            }
        }
    }
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                configurePom(pom)
            }
        }
    }

    tasks.create("installLocally", Upload) {
        configuration = configurations.archives

        repositories {
            mavenDeployer {
                repository(url: "file://${rootProject.buildDir}/localMaven")

                configurePom(pom)
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    if (project.getPlugins().hasPlugin('com.android.application') ||
            project.getPlugins().hasPlugin('com.android.library')) {
        task install(type: Upload, dependsOn: assemble) {
            repositories.mavenInstaller {
                configuration = configurations.archives

                configurePom(pom)
            }
        }

        task androidJavadocs(type: Javadoc) {
            source = android.sourceSets.main.java.source
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        }

        task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
            archiveClassifier.set('javadoc')
            from androidJavadocs.destinationDir
        }

        task androidSourcesJar(type: Jar) {
            archiveClassifier.set('sources')
            from android.sourceSets.main.java.source
        }
    } else {
        install {
            repositories.mavenInstaller {
                configurePom(pom)
            }
        }

        task sourcesJar(type: Jar, dependsOn:classes) {
            archiveClassifier.set('sources')
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn:javadoc) {
            archiveClassifier.set('javadoc')
            from javadoc.destinationDir
        }
    }

    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    artifacts {
        if (project.getPlugins().hasPlugin('com.android.application') ||
                project.getPlugins().hasPlugin('com.android.library')) {
            archives androidSourcesJar
            archives androidJavadocsJar
        } else {
            archives sourcesJar
            archives javadocJar
        }
    }
}